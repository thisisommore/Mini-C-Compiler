%code requires {
  #include "ast.hpp"
      enum E_l_type {
    str,dec
};
}
%{
extern int line_no;
#include <stdio.h>
#include <string.h>
#include "lexer.hpp"
void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

%}


%union { 

	struct TokenData { 
		char value[100];
        enum E_l_type l_type; 
		struct ExprNode* nd;
	} token_data; 
} 

%token <token_data> INT ID_ NUMBER SEMI EQ MAIN C_OPEN C_CLOSE B_OPEN B_CLOSE
%type <token_data> STATEMENTS LITERAL

%%


PROGRAM: INT MAIN B_OPEN B_CLOSE BODY

BODY: C_OPEN STATEMENTS C_CLOSE
STATEMENTS:  STATEMENT STATEMENTS 
            | ;
STATEMENT: INT ID_ EQ NUMBER {
    auto var = Builder->CreateAlloca(Builder->getInt32Ty(), 0, $2.value);
    Builder->CreateStore(Builder->getInt32(stoi($4.value)), var);
} SEMI


%%

int main(){
    set_vars();
    yyparse();
    TheModule->print(llvm::outs(), nullptr);
}

