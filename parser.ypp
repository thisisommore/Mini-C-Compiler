%code requires {
  #include "ast.hpp"
      enum E_l_type {
    str,dec
};
}
%{
extern int line_no;
#include <stdio.h>
  #include "ast.hpp"
#include <string>
map<std::string,Value *> symbol;
#include "lexer.hpp"
void yyerror(const char *s) {
    fprintf(stderr, "%d, Error: %s\n",line_no, s);
}

%}


%union { 

	struct TokenData { 
		char value[100];
        enum E_l_type l_type; 
		struct ExprNode* nd;
        Value* v;
	} token_data; 
} 

%token <token_data> INT ID_ NUMBER SEMI EQ MAIN C_OPEN C_CLOSE B_OPEN B_CLOSE IF GT LT
%type <token_data> STATEMENTS LITERAL COMP

%%


PROGRAM: INT MAIN B_OPEN B_CLOSE BODY

BODY: C_OPEN STATEMENTS C_CLOSE
STATEMENTS:  STATEMENT STATEMENTS 
            | ;
STATEMENT: ASSIGNMENT 
    | IF_DEFINATION

IF_DEFINATION: IF B_OPEN ID_ COMP ID_ B_CLOSE {
    auto func=Builder->GetInsertBlock()->getParent();
    auto if_block = BasicBlock::Create(*TheContext, "if_block", func);
    auto end_block = BasicBlock::Create(*TheContext, "end_block", func);
    CmpExpr* cmpExpr=(CmpExpr*)$4.nd;
    auto cond = Builder->CreateICmp(cmpExpr->predicate,symbol[$3.value], symbol[$5.value], "cond");
    Builder->CreateCondBr(cond, if_block, end_block);
    Builder->SetInsertPoint(if_block);
    $1.v=end_block;
} BODY {
    Builder->CreateBr((BasicBlock *)$1.v);
    Builder->SetInsertPoint((BasicBlock *)$1.v);
}

COMP: EQ EQ {$$.nd=new CmpExpr(ICmpInst::ICMP_EQ);} 
    | LT EQ {$$.nd=new CmpExpr(ICmpInst::ICMP_SLE);} 
    | GT EQ {$$.nd=new CmpExpr(ICmpInst::ICMP_SGE);} 
    | GT    {$$.nd=new CmpExpr(ICmpInst::ICMP_SGT);} 
    | LT    {$$.nd=new CmpExpr(ICmpInst::ICMP_SLT);} 

ASSIGNMENT: INT ID_ EQ NUMBER {
    auto var = Builder->CreateAlloca(Builder->getInt32Ty(), 0, $2.value);
    Builder->CreateStore(Builder->getInt32(stoi($4.value)), var);
    $2.v=var;
    symbol[$2.value]=var;
} SEMI


%%

int main(){
    set_vars();
    yyparse();
    TheModule->print(llvm::outs(), nullptr);
}

